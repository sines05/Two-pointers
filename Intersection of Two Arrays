Cách 1: Sử dụng unoredered_set để lưu cả vector và result (unordered_set không có phần tử trùng lặp) O(m+n)
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        unordered_set<int> num_set(nums1.begin(), nums1.end());
        unordered_set<int> result;
        for (int num : nums2) {
            if (num_set.find(num) != num_set.end()) {
                result.insert(num);
            }
        }
    return vector<int>(result.begin(), result.end());
    }
};
Cách 2: Dùng two pointers:
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        vector<int> result;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int i {0}, j{0};
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] == nums2[j]) {
                if (result.empty() || result.back() != nums1[i]) {
                    result.emplace_back(nums1[i]);
                }
                ++i;
                ++j;
            } else if (nums1[i] < nums2[j]) {
                ++i;
            } else {
                ++j;
            }
        }
        return result;
    }
};
